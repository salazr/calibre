# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from gettext import gettext as _

from book_list.item_list import build_list, create_item
from dom import clear, ensure_id, svgicon
from read_book.globals import runtime
from read_book.prefs.colors import commit_colors, create_colors_panel
from read_book.prefs.fonts import commit_fonts, create_fonts_panel
from read_book.prefs.head_foot import commit_head_foot, create_head_foot_panel
from read_book.prefs.layout import commit_layout, create_layout_panel
from read_book.prefs.user_stylesheet import (
    commit_user_stylesheet, create_user_stylesheet_panel
)


class Prefs:

    def __init__(self, container, close_func, on_change):
        self.close_func = close_func
        self.on_change = on_change
        title = E.h2()
        self.title_id = ensure_id(title)
        container.appendChild(E.div(
            style='display: flex; justify-content: space-between; padding: 1ex 1em; border-bottom: solid 1px currentColor',
            title,
            E.div(svgicon('close'), onclick=self.onclose, style='cursor:pointer'),
        ))
        container.appendChild(E.div())
        self.container_id = ensure_id(container.lastChild)
        self.stack = v'["top"]'
        self.display_top(container.lastChild)

    def onchange(self):
        self.on_change()

    def onclose(self):
        if self.stack.length > 1:
            which = self.stack.pop()
            close_func = getattr(self, 'close_' + which, None)
            if close_func:
                close_func.bind(self)()
            self.display_panel(self.stack[-1])
        else:
            self.close_func()

    @property
    def container(self):
        return document.getElementById(self.container_id)

    def display_panel(self, which):
        container = self.container
        clear(container)
        getattr(self, 'display_' + which)(container)

    def show_panel(self, which):
        self.stack.push(which)
        self.display_panel(which)

    def display_top(self, container):
        document.getElementById(self.title_id).textContent = _('Configure book reader')
        c = E.div()
        container.appendChild(c)
        items = [
            create_item(_('Colors'), def():self.show_panel('colors');, _('Colors of the page and text')),
            create_item(_('Page layout'), def():self.show_panel('layout');, _('Page margins and number of pages per screen')),
            create_item(_('User style sheet'), def():self.show_panel('user_stylesheet');, _('Style rules for text')),
            create_item(_('Headers and footers'), def():self.show_panel('head_foot');, _('Customize the headers and footers')),
        ]
        if runtime.is_standalone_viewer:
            items.push(create_item(
                _('Fonts'), def():self.show_panel('fonts');, _('Font choices')))
        build_list(c, items)

    def display_fonts(self, container):
        document.getElementById(self.title_id).textContent = _('Fonts')
        create_fonts_panel(container)

    def close_fonts(self):
        commit_fonts(self.onchange, self.container)

    def display_colors(self, container):
        document.getElementById(self.title_id).textContent = _('Colors')
        create_colors_panel(container)

    def close_colors(self):
        commit_colors(self.onchange, self.container)

    def display_layout(self, container):
        document.getElementById(self.title_id).textContent = _('Page layout')
        create_layout_panel(container)

    def close_layout(self):
        commit_layout(self.onchange, self.container)

    def display_user_stylesheet(self, container):
        document.getElementById(self.title_id).textContent = _('User style sheet')
        create_user_stylesheet_panel(container)

    def close_user_stylesheet(self):
        commit_user_stylesheet(self.onchange, self.container)

    def display_head_foot(self, container):
        document.getElementById(self.title_id).textContent = _('Headers and footers')
        create_head_foot_panel(container)

    def close_head_foot(self):
        commit_head_foot(self.onchange, self.container)


def create_prefs_panel(container, close_func, on_change):
    Prefs(container, close_func, on_change)
